{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Cortex Debug",
            "cwd": "${workspaceFolder}",
            "executable": "Debug/Clean_project.elf", //Данную строку можно обновить через Makefile:Update JSON files (Experimental)
            "request": "launch",
            "type": "cortex-debug", //Отладчик. В нашем случае Extension Cortex-debug
            "gdbPath": "C:/dev_tools/CH32_tools/RISC-V_Embedded_GCC12/bin/riscv-none-elf-gdb.exe", //Данную строку можно обновить через Makefile:Update JSON files (Experimental)
            "servertype": "openocd", //тип отладчика
            "serverArgs": [
                "-d3"
            ],
            "serverpath": "C:/dev_tools/CH32_tools/OpenOCD/bin/openocd.exe", //Данную строку можно обновить через Makefile:Update JSON files (Experimental)
            "configFiles": ["C:/dev_tools/CH32_tools/OpenOCD/bin/wch-riscv.cfg"], //Данную строку можно обновить через Makefile:Update JSON files (Experimental)
            "svdFile": "C:/dev_tools/CH32_tools/WCH_svd/RISC-V/CH32V003/NoneOS/CH32V003xx.svd", //Данную строку можно обновить через Makefile:Update JSON files (Experimental)
            "liveWatch": {
                "enabled": false //Использовать LiveWatch
            },
            "preLaunchTask": "Run All Tasks", //Соберем проект перед отладкой
            "runToEntryPoint": "main", //Поставим точку останова в main
            "postDebugTask": "Monitor resume" //Запустим задачу Monitor resume, чтоб после завершения дебага микроконтроллер снялся с паузы и продолжил работать дальше
        }
    ]
}